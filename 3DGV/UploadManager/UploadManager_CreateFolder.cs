using UnityEngine;
using System.Collections;
using SimpleFileBrowser;
using System.IO;
using System;
using System.Collections.Generic;
using UnityEngine.UI;

public class UploadManager_CreateFolder : MonoBehaviour
{
    [Header("Section")]
    public string section;

    [Header("Folder / File")]
    public string TargetFolder;
    public string TargetFile;

    [Header("Genome Values")]
    public string DatabasePath;
    public string RelativeSectionPath;
    public string TargetFile_absolute;
    public string TargetFile_relative;
    public string TargetFolder_absolute;
    public string TargetFolder_relative;

    [Header("UI References")]
    public InputField FeedbackMessage_InputField;
    public InputField TargetFile_InputField;
    public InputField TargetFolderRelative_InputField;
    public InputField TargetFolderAbsolute_InputField;
    public InputField DestinationPathRelative_InputField;
    public InputField DestinationPathAbsolute_InputField;

    [Header("Buttons")]
    public GameObject Cancel_btn;
    public GameObject Submit_btn;
    public GameObject Completed_btn;

    /*--------------------------------------------------*/

    public void Setup(string s, bool e = false)
    {
        //Setup values
        section = s;

        //Reset
        ResetFields();

        //Update file system values
        UpdateFileSystemValues();

        //Update input field values
        UpdateInputFieldValues();

        //Display correct buttons
        DisplayButtonOptions();

        //Activate
        this.gameObject.SetActive(e);

        //Set input field focus
        SetInputFieldFocus();
    }

    /*----------*/

    void ResetFields()
    {
        //Feedback message
        FeedbackMessage_InputField.text = "";

        //Input fields
        TargetFile_InputField.text = "";
        TargetFolderRelative_InputField.text = "";
        TargetFolderAbsolute_InputField.text = "";
        DestinationPathRelative_InputField.text = "";
        DestinationPathAbsolute_InputField.text = "";

        //Variables
        DatabasePath = "";
        TargetFolder = "";
        TargetFile_relative = "";
        TargetFile_absolute = "";
        TargetFolder_relative = "";
        TargetFolder_absolute = "";

        //Button
        Submit_btn.GetComponent<Button>().interactable = false;
    }

    public void UpdateFileSystemValues()
    {
        //Get database root paths
        DatabasePath = DatabaseManager.Instance.GetDatabasePath();
        RelativeSectionPath = UploadManager.Instance.GetRelativeDatabasePath(section);

        //Set database file values
        TargetFolder = TargetFile_InputField.text;
        //TargetFile;

        TargetFolder_relative = RelativeSectionPath;// + "/" + TargetFolder;
        TargetFolder_absolute = DatabasePath + RelativeSectionPath;

        TargetFile_relative = RelativeSectionPath + TargetFolder;
        TargetFile_absolute = DatabasePath + RelativeSectionPath + TargetFolder;
    }

    public void UpdateInputFieldValues(){
        //Input fields
        //TargetFile_InputField.text = "";
        TargetFolderRelative_InputField.text = TargetFolder_relative;
        TargetFolderAbsolute_InputField.text = TargetFolder_absolute;

        DestinationPathRelative_InputField.text = TargetFile_relative;
        DestinationPathAbsolute_InputField.text = TargetFile_absolute;
    }

    /*--------------------------------------------------
    Create Folder Action
    --------------------------------------------------*/

    void CreateFolder(string f)
    {
        Directory.CreateDirectory(f);

        CreateAutoGeneratedFolders(f);

        LoadDirectoryContent();

        FeedbackMessage("Folder Created Successfully", Color.green);
    }

    /*--------------------------------------------------
    Feedback Message
    --------------------------------------------------*/

    void FeedbackMessage(string txt, Color color)
    {
        //Set
        FeedbackMessage_InputField.textComponent.color = color;

        //Set message
        FeedbackMessage_InputField.text = txt;
    }

    /*--------------------------------------------------
    Input Field Listener
    --------------------------------------------------*/

    public void RetrieveInputValues()
    {
        //Update file system values
        UpdateFileSystemValues();

        //Update input field values
        UpdateInputFieldValues();

        //Enable submit button
        EnableSubmitButton();
    }

    void EnableSubmitButton()
    {
        if (TargetFolder.Length > 0)
        {
            Submit_btn.GetComponent<Button>().interactable = true;
        }
        else
        {
            Submit_btn.GetComponent<Button>().interactable = false;
        }
    }

    void SetInputFieldFocus()
    {
        TargetFile_InputField.ActivateInputField();
        TargetFile_InputField.Select();
    }

    /*--------------------------------------------------
    Buttons Setup
    --------------------------------------------------*/

    void DisplayButtonOptions()
    {
        Cancel_btn.SetActive(true);
        Submit_btn.SetActive(true);
        Completed_btn.SetActive(false);
    }

    void DisplayButtonComplete()
    {
        Cancel_btn.SetActive(false);
        Submit_btn.SetActive(false);
        Completed_btn.SetActive(true);
    }

    /*--------------------------------------------------
    Buttons Actions
    --------------------------------------------------*/

    public void ClickCancel_btn()
    {
        ResetFields();
        this.gameObject.SetActive(false);
    }

    public void ClickSubmit_btn()
    {
        CreateFolder(TargetFile_absolute);
        DisplayButtonComplete();
    }

    //Create auto generated folders on create new folder
    void CreateAutoGeneratedFolders(string f)
    {
        if (section == "GenomeSet")
        {
            Directory.CreateDirectory(f + "/Genes");
            Directory.CreateDirectory(f + "/Cells");
        }
        else
        if (section == "CellType")
        {
            Directory.CreateDirectory(f + "/Annotations");
            Directory.CreateDirectory(f + "/Models");
        }
    }

    void LoadDirectoryContent()
    {
        UploadManager.Instance.SetEnabledSection(section);
    }
}

//, string p, bool e = false)

// Path.Combine(TargetFile, TargetFolder);

//TargetFolder = GetUploadDirectoryPath(s);
//TargetFile_InputField.GetComponent<InputField>().text = p;
//DatabasePath = DatabaseManager.Instance.GetDatabasePath();
//RelativeSectionPath = UploadManager.Instance.GetRelativeDatabasePath(s);

//Directory path temp
//TargetFile = DatabasePath + RelativeSectionPath;

//Set text fields
//TargetFolderAbsolute_InputField.text = TargetFile;


//public void CreateFolder()//delete
//{
//    if (TargetFile_InputField.text.Length > 0)
//    {
//        Submit_btn.GetComponent<Button>().interactable = true;
//        TargetFolder = TargetFile_InputField.text;
//    }
//    else
//    {
//        Submit_btn.GetComponent<Button>().interactable = false;
//    }

//    //Updated text
//    string txt = Path.Combine(TargetFile, TargetFile_InputField.text);
//    DestinationPathAbsolute_InputField.text = txt;
//}

//public void SetUploadSectionValue(string s)
//{

//}

//List<string> filenames = new List<string>();
//bool fileselected = false;

//private static void DirectoryCopy(string source, string destination, bool copysub)
//{
//    DirectoryInfo directory = new DirectoryInfo(source);
//    DirectoryInfo[] dirs = directory.GetDirectories();
//    Directory.CreateDirectory(destination);
//    FileInfo[] files = directory.GetFiles();
//    foreach (FileInfo file in files)
//    {
//        string t_Path = Path.Combine(destination, file.Name);
//        file.CopyTo(t_Path, true);
//        try
//        {
//            Debug.Log(destination);
//        }
//        catch (Exception e)
//        {
//            Debug.LogException(e);
//        }
//    }
//    if (copysub)
//    {
//        foreach (DirectoryInfo sub in dirs)
//        {
//            string d_t_path = Path.Combine(destination, sub.Name);
//            DirectoryCopy(sub.FullName, d_t_path, copysub);
//        }
//    }
//}






//public GameObject inputfield_0;
//public GameObject TargetFile_InputField;
//public GameObject DestinationPathAbsolute_InputField;

//AbseSystem Paths
//string TargetFile;




//DatabasePath = DatabaseManager.Instance.GetDatabasePath();
//rivate staticd Clear(GameObject input)
//{
//    input.GetComponent<InputField>().text = "";
//}




//GameObject.Find("InputField (0)");
//GameObject.Find("InputField (1)");
// = GameObject.Find("InputField (2)");
//public GameObject submit;//GameObject.Find("Button (1)");
//public GameObject submit;//GameObject.Find("Button (1)");


//TargetFolderAbsolute_InputField.text = TargetFile;

//Submit_btn.GetComponent<Button>().interactable = false;


//private static void Print(GameObject input, string texttoshow, Color color)
//{
//    Text temp = input.GetComponent<InputField>().textComponent;
//    temp.color = color;
//    input.GetComponent<InputField>().text = texttoshow;
//}

//SetUploadSectionValue("Species");


//public List<string> showfilenames()
//{
//    return filenames;
//}



//TargetFile = DatabaseManager.Instance.GetDatabasePath();
////Directory path temp
//string DatabasePath_tmp = "";

////Database path
//string DatabasePath = DatabaseManager.Instance.GetDatabasePath();

////Genome settings
//string Species = UploadManager.Instance.Data["Species"];
//string GenomeSet = UploadManager.Instance.Data["GenomeSet"];
//string CellType = UploadManager.Instance.Data["CellType"];
//string Models = UploadManager.Instance.Data["Models"];
//string Annotations = UploadManager.Instance.Data["Annotations"];
//string Genes = UploadManager.Instance.Data["Genes"];

//section = s;

//switch (s)
//{
//    case "Species":
//        TargetFile = DatabaseManager.Instance.GetDatabasePath();//DatabaseManager.Instance.GetDatabasePath()								  //TargetFile = DatabaseManager.Instance.GetDatabasePath();
//        break;

//    case "GenomeSet":
//        TargetFile = DatabaseManager.Instance.GetDatabasePath() + "/" + Species;
//        break;

//    case "CellType":
//        TargetFile = DatabaseManager.Instance.GetDatabasePath() + "/" + Species + "/" + GenomeSet + "/Cells";
//        break;

//    case "Models":
//        TargetFile = DatabaseManager.Instance.GetDatabasePath() + "/" + Species + "/" + GenomeSet + "/Cells/" + CellType + "/Models";
//        break;

//    case "Annotations":
//        TargetFile = DatabaseManager.Instance.GetDatabasePath() + "/" + Species + "/" + GenomeSet + "/Cells/" + CellType + "/Annotations";
//        break;

//    case "Genes":
//        TargetFile = DatabaseManager.Instance.GetDatabasePath() + "/" + Species + "/" + GenomeSet + "/Genes";
//        break;
//}

//private static void Upload()
//   {

//   }